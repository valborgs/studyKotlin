// 리터럴
// 프로그래밍 언어에서 값을 작성하는 문법
// 작성하는 값에 따라서 기억공간의 용도, 크기, 위치가 결정된다.

// 용도 : 저장하는 값을 효율적이고 정상적으로 유지하기 위한 방법을 결정한다.
// 자료구조 : 데이터를 목적에 맞춰 효율적으로 관리하기 위한 방법
// 자료구조에서 정의하는 값 관리 기법을 따른다. (정수, 실수 등등 값의 형태에 따라 관리하는 방법이 다르다)
// 크기 : 리터럴인 경우에는 크기가 정해져 있다.
// 위치 : OS가 비어있는 공간의 위치를 알려주기 때문에 알아서 결정된다.


fun main() {
    // 정수(4 byte or 8 byte)
    println(100)
    println(2147483647)
    println(-2147483648)
    // 자바의 경우 정수값을 작성하면 4byte 기억공간이 마련되기 때문에
    // 아래와 같이 범위를 벗어난 값을 작성하면 오류가 발생한다.
    // 8byte 기억공간이 만들어질 수 있도록 L을 값 뒤에 붙여줘야 한다.
    println(2147483648L)
    println(-2147483649L)
    // 그런데 코틀린의 경우 L을 붙이지 않더라도 작성된 값을 보고 Java코드로 변환될 때
    // 4byte로 충분한 경우 정수값 그대로 유지되고
    // 8byte 기억공간이 필요한 값이라면 뒤에 L을 붙인 코드로 변경된다
    // 즉 코틀린은 정수값을 작성할 때 값의 범위를 보고 뒤에 L을 붙여주지 않아도 된다.
    println(2147483648)
    println(-2147483649)

    // 정수값을 작성할 때 자릿 구분을 위해 _ 를 사용할 수 있다.
    // _ 를 작성했다고 하더라도 그냥 정수값이다.
    println(123_456_789)

    // 실수(8 byte)
    print(11.11)
    // 실수(4 byte)
    print(11.11F)

    // 문자(2byte ?, 실행되는 시스템에 따라간다)
    // 내부적으로 정수값으로 관리된다.
    println('A')
    println('가')

    // 문자열(작성한 글자 수 만큼 메모리를 사용한다. 객체라는 것으로 관리된다)
    println("문자열")

    // 논리 타입
    // 참을 의미
    println(true)
    // 거짓을 의미
    println(false)

    // RawString
    // 여러 줄의 문자열을 표현할 때 사용한다.
    println("""동해물과 백두산이
        |마르고 닳도록
        |하느님이 보우하사
        |우리나라 만세
    """.trimMargin())
}